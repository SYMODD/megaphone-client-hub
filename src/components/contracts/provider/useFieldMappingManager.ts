
import { useEffect } from 'react';
import { FieldMapping, usePDFTemplates } from "@/hooks/usePDFTemplates";

interface UseFieldMappingManagerProps {
  selectedTemplateId: string | null;
  fieldMappings: FieldMapping[];
  setFieldMappings: (mappings: FieldMapping[]) => void;
  setHasUnsavedChanges: (hasChanges: boolean) => void;
  templateMappings: Record<string, FieldMapping[]>;
  lastSavedMappings: React.MutableRefObject<string>;
  lastLoadedTemplateId: React.MutableRefObject<string | null>;
}

export const useFieldMappingManager = ({
  selectedTemplateId,
  fieldMappings,
  setFieldMappings,
  setHasUnsavedChanges,
  templateMappings,
  lastSavedMappings,
  lastLoadedTemplateId
}: UseFieldMappingManagerProps) => {
  const { saveMappings } = usePDFTemplates();

  // Charger automatiquement les mappings quand un template est s√©lectionn√©
  useEffect(() => {
    if (selectedTemplateId && selectedTemplateId !== lastLoadedTemplateId.current && templateMappings) {
      console.log('üîÑ Chargement des mappings pour le template s√©lectionn√©:', selectedTemplateId);
      
      const existingMappings = templateMappings[selectedTemplateId] || [];
      console.log('üìã Mappings trouv√©s pour ce template:', existingMappings.length, 'champs');
      
      setFieldMappings(existingMappings);
      lastLoadedTemplateId.current = selectedTemplateId;
      
      // Mettre √† jour la r√©f√©rence des derniers mappings sauvegard√©s
      const mappingsString = JSON.stringify(existingMappings);
      lastSavedMappings.current = mappingsString;
      setHasUnsavedChanges(false);
      
      console.log('‚úÖ Mappings charg√©s et appliqu√©s pour le template:', selectedTemplateId);
    }
  }, [selectedTemplateId, templateMappings, setFieldMappings, setHasUnsavedChanges, lastLoadedTemplateId, lastSavedMappings]);

  // Gestion des changements de mappings
  const handleFieldMappingsChange = (mappings: FieldMapping[]) => {
    console.log('üîÑ Mise √† jour des mappings:', mappings.length, 'champs');
    setFieldMappings(mappings);
    
    // V√©rifier si les mappings ont vraiment chang√©
    const mappingsString = JSON.stringify(mappings);
    const hasChanges = mappingsString !== lastSavedMappings.current;
    setHasUnsavedChanges(hasChanges);
    
    console.log('üìä Changements d√©tect√©s:', hasChanges);
  };

  // Sauvegarde manuelle des mappings
  const handleSaveMappings = async () => {
    if (!selectedTemplateId || !fieldMappings.length) {
      console.warn('‚ö†Ô∏è Aucun template s√©lectionn√© ou aucun mapping √† sauvegarder');
      return;
    }

    try {
      console.log('üíæ Sauvegarde manuelle des mappings pour le template:', selectedTemplateId);
      await saveMappings(selectedTemplateId, fieldMappings);
      
      const mappingsString = JSON.stringify(fieldMappings);
      lastSavedMappings.current = mappingsString;
      setHasUnsavedChanges(false);
      
      console.log('‚úÖ Sauvegarde manuelle termin√©e');
    } catch (error) {
      console.error('‚ùå Erreur lors de la sauvegarde manuelle:', error);
      throw error;
    }
  };

  return {
    handleFieldMappingsChange,
    handleSaveMappings
  };
};
