
import React, { useState } from "react";
import { useRecaptchaSettings } from "@/hooks/useRecaptchaSettings";
import { toast } from "sonner";
import { LoginForm } from "../types";

export const useRoleLogin = (
  role: string,
  onLogin: (email: string, password: string) => Promise<void>
) => {
  const [loginForm, setLoginForm] = useState<LoginForm>({
    email: "",
    password: "",
  });

  const { isConfigured } = useRecaptchaSettings();

  // R√àGLES FINALES SIMPLIFI√âES ET CLAIRES :
  // - Agent : TOUJOURS connexion directe (pas de reCAPTCHA jamais)
  // - Admin/Superviseur : reCAPTCHA UNIQUEMENT si configur√©
  const requiresRecaptcha = role !== 'agent' && isConfigured;

  console.log(`üîê [FIXED_LOGIN] Logique de connexion clarifi√©e pour ${role}:`, {
    role,
    isConfigured,
    requiresRecaptcha,
    decision: role === 'agent' ? 'BYPASS_TOTAL_AGENT' : 
              (isConfigured ? 'RECAPTCHA_OBLIGATOIRE' : 'CONNEXION_DIRECTE_AUTORIS√âE')
  });

  // Gestionnaire avec reCAPTCHA pour Admin/Superviseur configur√©
  const handleLoginWithRecaptcha = async (recaptchaToken: string) => {
    console.log('üîí [FIXED_LOGIN] Connexion avec reCAPTCHA valid√©:', role, recaptchaToken.substring(0, 20) + '...');
    
    const tempData = localStorage.getItem('temp_login_data');
    if (!tempData) {
      toast.error('Donn√©es de connexion manquantes');
      return;
    }

    try {
      const { email, password } = JSON.parse(tempData);
      console.log(`üìù [FIXED_LOGIN] Connexion ${role} apr√®s validation reCAPTCHA:`, email);
      
      await onLogin(email, password);
      localStorage.removeItem('temp_login_data');
      
      toast.success(`‚úÖ Connexion ${role} r√©ussie avec s√©curit√© renforc√©e`);
    } catch (error) {
      console.error('‚ùå [FIXED_LOGIN] Erreur lors de la connexion:', error);
      toast.error('Erreur lors de la connexion');
      localStorage.removeItem('temp_login_data');
    }
  };

  const handleRecaptchaError = (error: string) => {
    console.error('‚ùå [FIXED_LOGIN] Erreur reCAPTCHA:', error);
    toast.error('V√©rification de s√©curit√© √©chou√©e');
    localStorage.removeItem('temp_login_data');
  };

  const handleDirectLogin = async () => {
    if (!loginForm.email || !loginForm.password) {
      toast.error('Veuillez remplir tous les champs');
      return;
    }

    // LOGIQUE CLAIRE ET D√âFINITIVE
    if (requiresRecaptcha) {
      // Admin/Superviseur avec reCAPTCHA configur√© ‚Üí Stockage temporaire
      console.log(`üîí [FIXED_LOGIN] ${role} avec reCAPTCHA configur√© - stockage temporaire`);
      localStorage.setItem('temp_login_data', JSON.stringify({
        email: loginForm.email,
        password: loginForm.password
      }));
      toast.info('üîí Pr√©paration de la v√©rification de s√©curit√©...');
      // Le composant RecaptchaVerification prendra le relais
    } else {
      // Agent OU Admin/Superviseur sans reCAPTCHA ‚Üí Connexion directe
      const connectionType = role === 'agent' ? 'Agent (bypass automatique)' : `${role} (reCAPTCHA non configur√©)`;
      console.log(`‚ö° [FIXED_LOGIN] Connexion directe: ${connectionType}`);
      
      try {
        await onLogin(loginForm.email, loginForm.password);
        toast.success(`‚úÖ Connexion ${role} r√©ussie`);
      } catch (error) {
        console.error('‚ùå [FIXED_LOGIN] Erreur connexion directe:', error);
      }
    }
  };

  return {
    loginForm,
    setLoginForm,
    requiresRecaptcha,
    isConfigured,
    handleLoginWithRecaptcha,
    handleRecaptchaError,
    handleDirectLogin
  };
};
