
import { useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useRecaptchaSettings } from "@/hooks/useRecaptchaSettings";
import { useAuth } from "@/contexts/AuthContext";
import { toast } from "sonner";
import { DocumentType } from "@/types/documentTypes";
import { navigateToScanner, cleanupTempData, storeTempDocumentSelection } from "../utils/documentTypeUtils";

export const useDocumentSelection = () => {
  const navigate = useNavigate();
  const { isConfigured, isLoading } = useRecaptchaSettings();
  const { profile } = useAuth();

  // üßπ Nettoyer les donn√©es temporaires au montage du composant
  useEffect(() => {
    cleanupTempData();
  }, []);

  // CORRECTION MAJEURE : Aligner la logique sur useRecaptchaStatusLogic
  // reCAPTCHA est requis si l'agent ET si reCAPTCHA est configur√©
  const isRequired = profile?.role === "agent";
  const shouldUseRecaptcha = isRequired && isConfigured && !isLoading;

  console.log('üìã [DOCUMENT_SELECTOR] √âtat actuel (CORRIG√â v2):', {
    userRole: profile?.role,
    isRequired,
    isConfigured,
    isLoading,
    shouldUseRecaptcha,
    logique: shouldUseRecaptcha ? 'AVEC reCAPTCHA' : isRequired && !isConfigured ? 'REQUIS MAIS NON CONFIGUR√â (bypass)' : 'SANS reCAPTCHA (bypass)'
  });

  // CORRECTION : Gestionnaire reCAPTCHA am√©lior√©
  const handleDocumentSelectionWithRecaptcha = (recaptchaToken: string) => {
    console.log('üîí [RECAPTCHA_SUCCESS] Token re√ßu pour s√©lection document Agent:', recaptchaToken.substring(0, 20) + '...');
    
    // R√©cup√©rer le type de document depuis le localStorage temporaire
    const tempData = localStorage.getItem('temp_document_selection');
    if (!tempData) {
      console.error('‚ùå [RECAPTCHA_SUCCESS] Donn√©es de s√©lection manquantes');
      toast.error('Donn√©es de s√©lection manquantes');
      return;
    }

    try {
      const { docType } = JSON.parse(tempData);
      console.log('üìù [RECAPTCHA_SUCCESS] S√©lection de document valid√©e par reCAPTCHA:', docType);
      
      // Nettoyer les donn√©es temporaires AVANT la navigation
      localStorage.removeItem('temp_document_selection');
      console.log('üßπ [RECAPTCHA_SUCCESS] Donn√©es temporaires nettoy√©es');
      
      // Effectuer la navigation apr√®s validation reCAPTCHA
      navigateToScanner(docType, navigate);
      
    } catch (error) {
      console.error('‚ùå [RECAPTCHA_SUCCESS] Erreur lors de la s√©lection de document:', error);
      toast.error('Erreur lors de la s√©lection');
      localStorage.removeItem('temp_document_selection');
    }
  };

  const handleRecaptchaError = (error: string) => {
    console.error('‚ùå [RECAPTCHA_ERROR] Erreur reCAPTCHA s√©lection document:', error);
    toast.error('V√©rification de s√©curit√© √©chou√©e');
    // Nettoyer les donn√©es temporaires en cas d'erreur
    localStorage.removeItem('temp_document_selection');
    console.log('üßπ [RECAPTCHA_ERROR] Donn√©es temporaires nettoy√©es apr√®s erreur');
  };

  // CORRECTION MAJEURE : Simplification de la logique de clic
  const handleTypeClick = (docType: DocumentType, onTypeSelect?: (type: DocumentType) => void) => {
    console.log('üñ±Ô∏è [CLICK] Clic sur type de document:', docType, {
      shouldUseRecaptcha,
      userRole: profile?.role,
      isConfigured,
      isRequired,
      action: shouldUseRecaptcha ? 'STOCKAGE pour reCAPTCHA' : 'NAVIGATION directe'
    });

    if (shouldUseRecaptcha) {
      // Pour les agents avec reCAPTCHA configur√© : stocker temporairement
      // Le clic r√©el sera g√©r√© par RecaptchaVerification
      console.log('üîí [CLICK] Stockage temporaire pour reCAPTCHA:', docType);
      storeTempDocumentSelection(docType);
    } else {
      // Pour tous les autres cas : navigation directe
      console.log('‚ö° [CLICK] Navigation directe (BYPASS reCAPTCHA):', docType);
      if (onTypeSelect) {
        onTypeSelect(docType);
      } else {
        navigateToScanner(docType, navigate);
      }
    }
  };

  return {
    shouldUseRecaptcha,
    handleDocumentSelectionWithRecaptcha,
    handleRecaptchaError,
    handleTypeClick
  };
};
