// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// üîí S√âCURIS√â : Utilisation des variables d'environnement
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://bwljyrhvhumqtsmakavm.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ3bGp5cmh2aHVtcXRzbWFrYXZtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgyNjgxOTUsImV4cCI6MjA2Mzg0NDE5NX0.KJdotwFAAy3o-cQlIwm2mAi3yCx8tfCRBtWtfdTCdbY";

// Validation des variables d'environnement
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error('Variables d\'environnement Supabase manquantes. V√©rifiez votre fichier .env.local');
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// üîê SUPABASE PRO - Configuration avanc√©e avec MFA et s√©curit√© renforc√©e
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    // üõ°Ô∏è Activation des fonctionnalit√©s Pro
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    // üì± MFA Configuration
    flowType: 'pkce',
    // üîí Politique de s√©curit√© stricte
    storageKey: 'megaphone-auth-token',
    storage: window.localStorage,
    // üéØ Hooks pour validation personnalis√©e
    debug: import.meta.env.DEV
  },
  // üåê Configuration r√©seau optimis√©e
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  },
  // üìä Monitoring et performance
  db: {
    schema: 'public'
  }
});

// üîê SUPABASE PRO - Client Admin pour op√©rations privil√©gi√©es
export const supabaseAdmin = createClient<Database>(
  SUPABASE_URL, 
  import.meta.env.VITE_SUPABASE_SERVICE_ROLE_KEY || SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
);

// üéØ Export des types pour MFA
export type MFAEnrollResponse = {
  data: {
    id: string;
    type: 'totp';
    totp: {
      qr_code: string;
      secret: string;
      uri: string;
    };
  } | null;
  error: any;
};

export type MFAVerifyResponse = {
  data: {
    access_token: string;
    refresh_token: string;
    expires_in: number;
    token_type: string;
    user: any;
  } | null;
  error: any;
};