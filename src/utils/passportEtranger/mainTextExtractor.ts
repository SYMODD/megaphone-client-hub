
import { PassportExtractionContext } from "@/types/passportEtrangerTypes";
import { 
  safeStringTrim, 
  isValidName, 
  isValidNationality, 
  extractValueFromLine,
  extractRealValueFromField,
  containsMultilingualKeywords
} from "./stringUtils";
import { convertMainTextNationality, checkForNationalityInLine } from "./nationalityUtils";
import { 
  NAME_KEYWORDS, 
  NATIONALITY_KEYWORDS, 
  PASSPORT_FORMAT_PATTERNS,
  detectPassportFormat 
} from "./multilingualPatterns";

export const extractDataFromMainText = (lines: string[], passportData: any) => {
  console.log("üåç Extraction multilingue - Analyse de", lines.length, "lignes");
  
  // D√©tecter le format du passeport
  const passportFormat = detectPassportFormat(lines);
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].toUpperCase();
    const nextLine = i + 1 < lines.length ? lines[i + 1] : "";
    
    console.log(`üìù Ligne ${i}: "${line}"`);
    
    // Logique sp√©cifique pour les champs avec labels s√©par√©s (comme passeport canadien)
    // Recherche explicite de "SURNAME/NOM" suivi de la valeur
    if ((line.includes("SURNAME") && line.includes("NOM")) || 
        (line.includes("SURNAME") && !line.includes("GIVEN"))) {
      if (nextLine && isValidName(nextLine)) {
        passportData.nom = safeStringTrim(nextLine);
        console.log("‚úÖ Nom trouv√© apr√®s label SURNAME:", nextLine);
        continue;
      }
    }
    
    // Recherche explicite de "GIVEN NAMES/PR√âNOMS" suivi de la valeur
    if ((line.includes("GIVEN") && (line.includes("PRENOM") || line.includes("NAMES"))) ||
        (line.includes("GIVEN NAMES") && !passportData.prenom)) {
      if (nextLine && isValidName(nextLine)) {
        passportData.prenom = safeStringTrim(nextLine);
        console.log("‚úÖ Pr√©nom trouv√© apr√®s label GIVEN NAMES:", nextLine);
        continue;
      }
    }
    
    // Recherche explicite de "NATIONALITY" suivi de la valeur
    if (line.includes("NATIONALITY") && !passportData.nationalite) {
      if (nextLine && isValidNationality(nextLine)) {
        const convertedNationality = convertMainTextNationality(nextLine);
        passportData.nationalite = safeStringTrim(convertedNationality);
        console.log("‚úÖ Nationalit√© trouv√©e apr√®s label NATIONALITY:", nextLine, "->", convertedNationality);
        continue;
      }
    }

    // D√©tection sp√©ciale pour passeport canadien
    if (line.includes("CANADA") && !passportData.nationalite) {
      passportData.nationalite = "Canada";
      console.log("‚úÖ Nationalit√© canadienne d√©tect√©e");
    }

    // Extraction multilingue du nom de famille (logique de fallback)
    if (containsMultilingualKeywords(line, NAME_KEYWORDS.surname) && !passportData.nom) {
      console.log("üîç Ligne contient mot-cl√© nom de famille:", line);
      const nameValue = extractRealValueFromField(line, nextLine);
      if (nameValue) {
        passportData.nom = safeStringTrim(nameValue);
        console.log("‚úÖ Nom de famille trouv√© (multilingue):", nameValue);
      }
    }
    
    // Extraction multilingue du pr√©nom (logique de fallback)
    if (containsMultilingualKeywords(line, NAME_KEYWORDS.givenName) && !passportData.prenom) {
      console.log("üîç Ligne contient mot-cl√© pr√©nom:", line);
      const prenomValue = extractRealValueFromField(line, nextLine);
      if (prenomValue) {
        passportData.prenom = safeStringTrim(prenomValue);
        console.log("‚úÖ Pr√©nom trouv√© (multilingue):", prenomValue);
      }
    }

    // Extraction multilingue de la nationalit√© (logique de fallback)
    if (containsMultilingualKeywords(line, NATIONALITY_KEYWORDS) && !passportData.nationalite) {
      let nationalityValue = extractValueFromLine(line, NATIONALITY_KEYWORDS);
      if (!nationalityValue && nextLine) {
        nationalityValue = extractValueFromLine(nextLine, []);
      }
      if (nationalityValue && isValidNationality(nationalityValue)) {
        const convertedNationality = convertMainTextNationality(nationalityValue);
        passportData.nationalite = safeStringTrim(convertedNationality);
        console.log("‚úÖ Nationalit√© trouv√©e (multilingue):", nationalityValue, "->", convertedNationality);
      }
    }

    // Traitement sp√©cifique selon le format d√©tect√© (seulement si pas encore trouv√©)
    if (passportFormat === 'numbered') {
      const match = line.match(PASSPORT_FORMAT_PATTERNS.numberedField);
      if (match) {
        const fieldNumber = match[1];
        const fieldName = match[2].trim();
        
        console.log(`üî¢ Champ num√©rot√© ${fieldNumber}: "${fieldName}"`);
        
        if (containsMultilingualKeywords(fieldName, NAME_KEYWORDS.surname) && !passportData.nom) {
          const nameValue = extractRealValueFromField(line, nextLine);
          if (nameValue) {
            passportData.nom = safeStringTrim(nameValue);
            console.log("‚úÖ Nom trouv√© (format num√©rot√©):", nameValue);
          }
        }
        if (containsMultilingualKeywords(fieldName, NAME_KEYWORDS.givenName) && !passportData.prenom) {
          const prenomValue = extractRealValueFromField(line, nextLine);
          if (prenomValue) {
            passportData.prenom = safeStringTrim(prenomValue);
            console.log("‚úÖ Pr√©nom trouv√© (format num√©rot√©):", prenomValue);
          }
        }
      }
    }

    if (passportFormat === 'colon') {
      const match = line.match(PASSPORT_FORMAT_PATTERNS.colonFormat);
      if (match) {
        const fieldName = match[1].trim();
        const fieldValue = match[2].trim();
        
        if (containsMultilingualKeywords(fieldName, NAME_KEYWORDS.surname) && !passportData.nom && isValidName(fieldValue)) {
          passportData.nom = safeStringTrim(fieldValue);
          console.log("‚úÖ Nom trouv√© (format deux points):", fieldValue);
        }
        if (containsMultilingualKeywords(fieldName, NAME_KEYWORDS.givenName) && !passportData.prenom && isValidName(fieldValue)) {
          passportData.prenom = safeStringTrim(fieldValue);
          console.log("‚úÖ Pr√©nom trouv√© (format deux points):", fieldValue);
        }
      }
    }
    
    // Format allemand : am√©lioration de la d√©tection des noms isol√©s
    if (passportFormat === 'german' && 
        line.match(PASSPORT_FORMAT_PATTERNS.germanIsolatedName) && 
        !line.match(/^(PASSPORT|REISEPASS|CANADA|DEUTSCH|GERMAN|BUNDESREPUBLIK|PP|CAN|TYPE)$/)) {
      
      if (isValidName(line)) {
        // Logique am√©lior√©e : chercher des noms apr√®s les champs identifi√©s
        if (i > 0) {
          const prevLine = lines[i - 1].toUpperCase();
          // Si la ligne pr√©c√©dente contient un mot-cl√© de nom de famille
          if (containsMultilingualKeywords(prevLine, NAME_KEYWORDS.surname) && !passportData.nom) {
            passportData.nom = safeStringTrim(line);
            console.log("‚úÖ Nom de famille trouv√© apr√®s champ (format allemand):", line);
          }
          // Si la ligne pr√©c√©dente contient un mot-cl√© de pr√©nom
          else if (containsMultilingualKeywords(prevLine, NAME_KEYWORDS.givenName) && !passportData.prenom) {
            passportData.prenom = safeStringTrim(line);
            console.log("‚úÖ Pr√©nom trouv√© apr√®s champ (format allemand):", line);
          }
          // Sinon, ordre par d√©faut : nom puis pr√©nom
          else if (!passportData.nom) {
            passportData.nom = safeStringTrim(line);
            console.log("‚úÖ Nom de famille potentiel (format allemand):", line);
          } else if (!passportData.prenom) {
            passportData.prenom = safeStringTrim(line);
            console.log("‚úÖ Pr√©nom potentiel (format allemand):", line);
          }
        }
      }
    }

    // Recherche sp√©cifique pour les nationalit√©s dans des lignes isol√©es
    if (!passportData.nationalite) {
      const nationalityCheck = checkForNationalityInLine(line);
      if (nationalityCheck) {
        passportData.nationalite = nationalityCheck;
        console.log("‚úÖ Nationalit√© trouv√©e dans ligne isol√©e:", nationalityCheck);
      }
    }
  }

  console.log("üéØ Extraction multilingue termin√©e - R√©sultats:", {
    nom: passportData.nom,
    prenom: passportData.prenom,
    nationalite: passportData.nationalite,
    format: passportFormat
  });
};
