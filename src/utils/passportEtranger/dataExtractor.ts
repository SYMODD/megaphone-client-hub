import { PassportEtrangerData } from "@/types/passportEtrangerTypes";
import { extractMRZData } from "@/services/ocr/mrzDataExtractor";
import { extractDataFromMainText } from "./mainTextExtractor";
import { normalizeNationality } from "../nationalityNormalizer";
import { detectCountryCodeInName, correctOCRNameErrors } from "./nationalityUtils";
import { detectAndCorrectNameInversion } from "./nameInversionDetector";

export const extractPassportEtrangerData = (text: string): PassportEtrangerData => {
  console.log("üåç === D√âBUT EXTRACTION PASSEPORT √âTRANGER ===");
  console.log("üìè Longueur du texte:", text.length);
  console.log("üìù TEXTE COMPLET OCR RE√áU:", text);
  
  const result: PassportEtrangerData = {};

  // √âtape 1: Tentative extraction MRZ (zone machine-readable)
  console.log("üîç √âTAPE 1 - Recherche zone MRZ...");
  const mrzData = extractMRZData(text);
  if (mrzData.nom || mrzData.prenom || mrzData.numero_passeport) {
    console.log("‚úÖ Donn√©es MRZ trouv√©es:", mrzData);
    Object.assign(result, mrzData);
  } else {
    console.log("‚ö†Ô∏è Aucune donn√©e MRZ d√©tect√©e");
  }

  // √âtape 2: Extraction depuis texte principal (compl√©ment ou alternative)
  console.log("üîç √âTAPE 2 - Extraction texte principal...");
  const lines = text.split('\n').map(line => line.trim());
  
  // Cr√©er un objet temporaire pour les donn√©es du texte principal
  const mainTextData: PassportEtrangerData = {};
  extractDataFromMainText(lines, mainTextData);
  
  console.log("üìã Donn√©es du texte principal extraites:", mainTextData);
  
  // √âtape 2.5: D√âTECTION ET CORRECTION INVERSION NOM/PR√âNOM
  console.log("üîÑ √âTAPE 2.5 - D√©tection inversion nom/pr√©nom...");
  const inversionAnalysis = detectAndCorrectNameInversion(result, mainTextData);
  
  if (inversionAnalysis.isInverted && inversionAnalysis.correctedData) {
    console.log(`üîÑ CORRECTION INVERSION APPLIQU√âE: Confiance ${inversionAnalysis.confidence}%`);
    result.nom = inversionAnalysis.correctedData.nom;
    result.prenom = inversionAnalysis.correctedData.prenom;
  }
  
  // √âtape 2.6: LOGIQUE DE PRIORIT√â - Texte principal prioritaire pour certains champs
  console.log("üîÑ √âTAPE 2.6 - Application de la logique de priorit√©...");
  
  // D√âTECTION MRZ CORROMPUE - caract√®res invalides ou codes pays invalides
  const isMRZCorrupted = (
    (result.nom && (result.nom.includes('+') || result.nom.includes('*') || result.nom.length < 2)) ||
    (result.prenom && (result.prenom.includes('*') || result.prenom === '**' || result.prenom.length < 2)) ||
    (result.nationalite && !['Canada', 'Allemagne', 'France', 'Espagne', 'Italie', 'Pologne', 'Slovaquie', 'Belgique', '√âtats-Unis', 'Royaume-Uni', 'Suisse', 'R√©publique tch√®que', 'Colombie', 'Maroc', 'Alg√©rie', 'Tunisie', 'Portugal', 'Pays-Bas', 'Autriche', 'Irlande', 'Br√©sil', 'Argentine', 'Chili', 'P√©rou', 'Venezuela', '√âquateur', 'Mexique', 'Turquie', 'Gr√®ce', 'Hongrie', 'Roumanie', 'Bulgarie', 'Croatie', 'Slov√©nie', 'Serbie', 'Russie', 'Ukraine'].includes(result.nationalite))
  );
  
  if (isMRZCorrupted) {
    console.log("‚ö†Ô∏è MRZ CORROMPUE D√âTECT√âE - Priorit√© au texte principal");
  }
  
  // PRIORIT√â INTELLIGENTE pour le num√©ro de passeport
  // Si MRZ corrompue, privil√©gier ABSOLUMENT le texte principal
  if (isMRZCorrupted && mainTextData.numero_passeport && mainTextData.numero_passeport.length >= 6) {
    console.log(`‚úÖ Num√©ro passeport: TEXTE PRINCIPAL prioritaire (MRZ corrompue) "${mainTextData.numero_passeport}" vs MRZ "${result.numero_passeport}"`);
    result.numero_passeport = mainTextData.numero_passeport;
  } else if (result.numero_passeport && result.numero_passeport.length >= 6) {
    console.log(`‚úÖ Num√©ro passeport: MRZ PRIORITAIRE "${result.numero_passeport}" vs TEXTE "${mainTextData.numero_passeport}"`);
    // Garder MRZ
  } else if (mainTextData.numero_passeport && mainTextData.numero_passeport.length >= 6) {
    console.log(`‚úÖ Num√©ro passeport: TEXTE PRINCIPAL en fallback "${mainTextData.numero_passeport}"`);
    result.numero_passeport = mainTextData.numero_passeport;
  }

    // PRIORIT√â INTELLIGENTE pour nom et pr√©nom
  // D√âTECTION DE M√âLANGE NOM/PR√âNOM DANS LA MRZ
  const isMRZMixedUpNames = (
    result.nom && result.prenom && mainTextData.nom && mainTextData.prenom &&
    (
      // Le pr√©nom MRZ contient le nom du texte principal (ex: "GALVIS LEYDI GRACIELA" contient "GALVIS")
      result.prenom.toUpperCase().includes(mainTextData.nom.split(' ')[mainTextData.nom.split(' ').length - 1]?.toUpperCase()) ||
      // Le nom MRZ est incomplet par rapport au texte principal (ex: "MALDONADO" vs "MALDONADO GALVIS")
      (mainTextData.nom.split(' ').length > 1 && result.nom === mainTextData.nom.split(' ')[0])
    )
  );
  
  if (isMRZMixedUpNames) {
    console.log("üîÑ MRZ a m√©lang√© nom/pr√©nom : privil√©gier texte principal plus pr√©cis");
    console.log(`   MRZ: "${result.nom}" / "${result.prenom}"`);
    console.log(`   TEXTE: "${mainTextData.nom}" / "${mainTextData.prenom}"`);
    result.nom = mainTextData.nom;
    result.prenom = mainTextData.prenom;
    console.log(`‚úÖ Nom/Pr√©nom: TEXTE PRINCIPAL prioritaire (MRZ m√©lang√©e) - "${result.nom}" / "${result.prenom}"`);
  }
  // Si MRZ corrompue, privil√©gier ABSOLUMENT le texte principal
  else if (isMRZCorrupted) {
    console.log("üîÑ MRZ corrompue : privil√©gier texte principal pour nom/pr√©nom");
    if (mainTextData.nom && mainTextData.nom.length >= 2) {
      result.nom = mainTextData.nom;
      console.log(`‚úÖ Nom: TEXTE PRINCIPAL prioritaire (MRZ corrompue) "${mainTextData.nom}"`);
    }
    if (mainTextData.prenom && mainTextData.prenom.length >= 2) {
      result.prenom = mainTextData.prenom;
      console.log(`‚úÖ Pr√©nom: TEXTE PRINCIPAL prioritaire (MRZ corrompue) "${mainTextData.prenom}"`);
    }
  }
  // Si MRZ disponible ET fiable ET non corrompue ET non m√©lang√©e, elle est prioritaire (plus pr√©cise)
  else if (result.nom && result.prenom && result.nom.length >= 2 && result.prenom.length >= 2 && !isMRZCorrupted) {
    console.log(`‚úÖ Nom/Pr√©nom: MRZ PRIORITAIRE - "${result.nom}" / "${result.prenom}"`);
    // Garder les donn√©es MRZ, ne pas √©craser
  } else {
    // Sinon utiliser texte principal en fallback
    if (mainTextData.nom && mainTextData.nom.length >= 2 && !result.nom) {
      console.log(`‚úÖ Nom: TEXTE PRINCIPAL en fallback "${mainTextData.nom}"`);
      result.nom = mainTextData.nom;
    }
    
    if (mainTextData.prenom && mainTextData.prenom.length >= 2 && !result.prenom) {
      console.log(`‚úÖ Pr√©nom: TEXTE PRINCIPAL en fallback "${mainTextData.prenom}"`);
      result.prenom = mainTextData.prenom;
    }
  }
  
  // Compl√©ter avec texte principal si MRZ manque quelque chose
  if (!result.nom && mainTextData.nom && mainTextData.nom.length >= 2) {
    console.log(`‚úÖ Nom: TEXTE PRINCIPAL pour compl√©ter MRZ "${mainTextData.nom}"`);
    result.nom = mainTextData.nom;
  }
  
  if (!result.prenom && mainTextData.prenom && mainTextData.prenom.length >= 2) {
    console.log(`‚úÖ Pr√©nom: TEXTE PRINCIPAL pour compl√©ter MRZ "${mainTextData.prenom}"`);
    result.prenom = mainTextData.prenom;
  }
  
  // PRIORIT√â TEXTE PRINCIPAL pour nationalit√©
  if (mainTextData.nationalite) {
    console.log(`‚úÖ Nationalit√©: TEXTE PRINCIPAL prioritaire "${mainTextData.nationalite}" vs MRZ "${result.nationalite}"`);
    result.nationalite = mainTextData.nationalite;
  }
  
  // PRIORIT√â TEXTE PRINCIPAL pour dates (plus pr√©cises)
  if (mainTextData.date_naissance) {
    console.log(`‚úÖ Date naissance: TEXTE PRINCIPAL prioritaire "${mainTextData.date_naissance}"`);
    result.date_naissance = mainTextData.date_naissance;
  }
  
  if (mainTextData.date_expiration) {
    console.log(`‚úÖ Date expiration: TEXTE PRINCIPAL prioritaire "${mainTextData.date_expiration}"`);
    result.date_expiration = mainTextData.date_expiration;
  }

  // √âtape 3: Normalisation des donn√©es
  console.log("üîß √âTAPE 3 - Normalisation des donn√©es...");
  if (result.nationalite) {
    result.nationalite = normalizeNationality(result.nationalite);
  }

  // √âtape 4: Validation et nettoyage
  console.log("üîç √âTAPE 4 - Validation finale...");
  
  // üÜï D√âTECTION ET CORRECTION DES CODES PAYS DANS LES NOMS
  if (result.nom) {
    const codeDetectionNom = detectCountryCodeInName(result.nom);
    if (codeDetectionNom.isCountryCode) {
      console.log(`‚ö†Ô∏è CODE PAYS D√âTECT√â DANS LE NOM: "${result.nom}" ‚Üí Nationalit√© sugg√©r√©e: "${codeDetectionNom.suggestedNationality}"`);
      
      // Si on n'a pas de nationalit√©, utiliser celle sugg√©r√©e
      if (!result.nationalite && codeDetectionNom.suggestedNationality) {
        result.nationalite = codeDetectionNom.suggestedNationality;
        console.log(`‚úÖ Nationalit√© corrig√©e depuis nom: "${result.nationalite}"`);
      }
      
      // CORRECTION CRITIQUE : Si le nom est exactement un code pays, le vider compl√®tement
      if (result.nom.length <= 3 && codeDetectionNom.isCountryCode) {
        console.log(`‚ö†Ô∏è Nom √©tait uniquement un code pays "${result.nom}", suppression compl√®te`);
        result.nom = undefined;  // Vider compl√®tement si c'est juste un code pays
      } else {
        // Sinon, essayer de nettoyer le nom
        const cleanedNom = correctOCRNameErrors(result.nom);
        if (cleanedNom && cleanedNom.length >= 2 && cleanedNom !== result.nom) {
          result.nom = cleanedNom;
          console.log(`‚úÖ Nom nettoy√©: "${result.nom}"`);
        } else {
          console.log(`‚ö†Ô∏è Nom √©tait principalement un code pays, suppression`);
          result.nom = undefined;
        }
      }
    }
  }
  
  // M√™me logique pour le pr√©nom
  if (result.prenom) {
    const codeDetectionPrenom = detectCountryCodeInName(result.prenom);
    if (codeDetectionPrenom.isCountryCode) {
      console.log(`‚ö†Ô∏è CODE PAYS D√âTECT√â DANS LE PR√âNOM: "${result.prenom}" ‚Üí Nationalit√© sugg√©r√©e: "${codeDetectionPrenom.suggestedNationality}"`);
      
      if (!result.nationalite && codeDetectionPrenom.suggestedNationality) {
        result.nationalite = codeDetectionPrenom.suggestedNationality;
        console.log(`‚úÖ Nationalit√© corrig√©e depuis pr√©nom: "${result.nationalite}"`);
      }
      
      // CORRECTION CRITIQUE : Si le pr√©nom est exactement un code pays, le vider compl√®tement
      if (result.prenom.length <= 3 && codeDetectionPrenom.isCountryCode) {
        console.log(`‚ö†Ô∏è Pr√©nom √©tait uniquement un code pays "${result.prenom}", suppression compl√®te`);
        result.prenom = undefined;  // Vider compl√®tement si c'est juste un code pays
      } else {
        // Sinon, essayer de nettoyer le pr√©nom
        const cleanedPrenom = correctOCRNameErrors(result.prenom);
        if (cleanedPrenom && cleanedPrenom.length >= 2 && cleanedPrenom !== result.prenom) {
          result.prenom = cleanedPrenom;
          console.log(`‚úÖ Pr√©nom nettoy√©: "${result.prenom}"`);
        } else {
          console.log(`‚ö†Ô∏è Pr√©nom √©tait principalement un code pays, suppression`);
          result.prenom = undefined;
        }
      }
    }
  }
  
  // Nettoyage des noms (enlever caract√®res parasites mais garder les accents)
  if (result.nom) {
    result.nom = result.nom.replace(/[¬Æ¬©‚Ñ¢\+\‚Ä¢\*]/g, '').trim();  // Enlever seulement les caract√®res parasites sp√©cifiques
    if (result.nom.length < 2) result.nom = undefined;
  }
  
  if (result.prenom) {
    result.prenom = result.prenom.replace(/[¬Æ¬©‚Ñ¢\+\‚Ä¢\*]/g, '').trim();  // Enlever seulement les caract√®res parasites sp√©cifiques
    if (result.prenom.length < 2) result.prenom = undefined;
  }

  // Validation num√©ro passeport
  if (result.numero_passeport) {
    result.numero_passeport = result.numero_passeport.replace(/[^A-Z0-9]/g, '');
    if (result.numero_passeport.length < 6) result.numero_passeport = undefined;
  }

  // Validation dates (format DD/MM/YYYY ou similaire)
  if (result.date_naissance && !/\d{1,2}[\/\.-]\d{1,2}[\/\.-]\d{4}/.test(result.date_naissance)) {
    console.warn("‚ö†Ô∏è Format date naissance invalide:", result.date_naissance);
    result.date_naissance = undefined;
  }
  
  if (result.date_expiration && !/\d{1,2}[\/\.-]\d{1,2}[\/\.-]\d{4}/.test(result.date_expiration)) {
    console.warn("‚ö†Ô∏è Format date expiration invalide:", result.date_expiration);
    result.date_expiration = undefined;
  }

  // √âtape 5: R√©sultats finaux
  console.log("üìã === R√âSULTAT FINAL EXTRACTION PASSEPORT √âTRANGER ===");
  const finalData = {
    nom: result.nom || "NON TROUV√â",
    prenom: result.prenom || "NON TROUV√â", 
    nationalite: result.nationalite || "NON TROUV√â",
    numero_passeport: result.numero_passeport || "NON TROUV√â",
    date_naissance: result.date_naissance || "NON TROUV√â",
    date_expiration: result.date_expiration || "NON TROUV√â"
  };
  
  console.log("üìã Donn√©es finales extraites:", finalData);
  
  // Calcul du taux de r√©ussite
  const successfulFields = Object.values(finalData).filter(value => 
    value && value !== "NON TROUV√â"
  ).length;
  
  console.log(`üìä Champs extraits avec succ√®s: ${successfulFields}/6`);
  console.log(`üìà Taux de r√©ussite: ${Math.round((successfulFields/6)*100)}%`);

  if (successfulFields === 0) {
    console.warn("‚ö†Ô∏è AUCUNE DONN√âE EXTRAITE - V√©rifiez la qualit√© de l'image ou le type de document");
  }

  console.log("üåç === FIN EXTRACTION PASSEPORT √âTRANGER ===");
  return result;
};