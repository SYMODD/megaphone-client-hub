
export const downloadPDFContract = (pdfBytes: Uint8Array, filename: string): void => {
  try {
    console.log('üîÑ Pr√©paration du t√©l√©chargement du PDF:', filename);
    const blob = new Blob([pdfBytes], { type: 'application/pdf' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    link.style.display = 'none';
    document.body.appendChild(link);
    link.click();
    
    // Nettoyer apr√®s un d√©lai pour permettre le t√©l√©chargement
    setTimeout(() => {
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      console.log('‚úÖ T√©l√©chargement termin√© et ressources nettoy√©es');
    }, 1000);
    
  } catch (error) {
    console.error('‚ùå Erreur lors du t√©l√©chargement:', error);
    throw new Error('Impossible de t√©l√©charger le fichier PDF');
  }
};

export const previewPDFContract = (pdfBytes: Uint8Array): string => {
  try {
    console.log('üîÑ Cr√©ation de la pr√©visualisation PDF...');
    
    if (!pdfBytes || pdfBytes.length === 0) {
      throw new Error('Donn√©es PDF vides ou invalides');
    }
    
    const blob = new Blob([pdfBytes], { 
      type: 'application/pdf'
    });
    
    if (blob.size === 0) {
      throw new Error('Impossible de cr√©er le blob PDF');
    }
    
    const url = URL.createObjectURL(blob);
    console.log('‚úÖ URL de pr√©visualisation cr√©√©e:', url, 'Taille du blob:', blob.size, 'bytes');
    return url;
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de la pr√©visualisation:', error);
    throw new Error(`Impossible de cr√©er la pr√©visualisation PDF: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
  }
};
