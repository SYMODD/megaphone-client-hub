
import { supabase } from "@/integrations/supabase/client";

export const ensureStorageBucket = async (bucketName: string = 'client-photos') => {
  try {
    console.log(`üîç V√©rification du bucket: ${bucketName}`);
    
    const { data: buckets, error } = await supabase.storage.listBuckets();
    
    if (error) {
      console.error(`‚ùå Erreur lors de la v√©rification des buckets:`, error);
      return false;
    }

    const bucket = buckets.find(bucket => bucket.name === bucketName);
    
    if (!bucket) {
      console.warn(`‚ö†Ô∏è Bucket ${bucketName} non trouv√©.`);
      return false;
    }

    console.log(`‚úÖ Bucket ${bucketName} trouv√© et accessible`);
    
    // Test d'acc√®s au bucket en tentant de lister les fichiers
    try {
      const { error: listError } = await supabase.storage
        .from(bucketName)
        .list('', { limit: 1 });
      
      if (listError) {
        console.warn(`‚ö†Ô∏è Bucket ${bucketName} trouv√© mais pas accessible:`, listError);
        return false;
      }
      
      console.log(`‚úÖ Bucket ${bucketName} accessible et fonctionnel`);
      return true;
    } catch (accessError) {
      console.warn(`‚ö†Ô∏è Test d'acc√®s au bucket ${bucketName} √©chou√©:`, accessError);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå Erreur lors de la v√©rification du bucket ${bucketName}:`, error);
    return false;
  }
};

export const uploadClientPhoto = async (imageBase64: string, documentType: string = 'cin'): Promise<string | null> => {
  try {
    console.log("üì§ UPLOAD PHOTO CLIENT - D√©but de l'upload vers client-photos");
    
    // V√©rifier que le bucket existe
    const bucketExists = await ensureStorageBucket('client-photos');
    if (!bucketExists) {
      console.error('‚ùå Le bucket client-photos n\'existe pas ou n\'est pas accessible');
      return null;
    }

    const response = await fetch(imageBase64);
    const blob = await response.blob();
    const filename = `${documentType}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}.jpg`;
    
    console.log(`üìù Nom du fichier g√©n√©r√©: ${filename}`);
    
    const { data, error } = await supabase.storage
      .from('client-photos')
      .upload(filename, blob, { 
        contentType: 'image/jpeg',
        upsert: false
      });

    if (error) {
      console.error('‚ùå Erreur lors de l\'upload vers client-photos:', error);
      return null;
    }

    console.log('‚úÖ Upload r√©ussi vers client-photos:', data);

    const { data: publicURL } = supabase.storage
      .from('client-photos')
      .getPublicUrl(data.path);

    const finalUrl = publicURL.publicUrl;
    console.log('üåê URL publique g√©n√©r√©e pour client-photos:', finalUrl);
    
    if (!finalUrl.includes('client-photos')) {
      console.warn('‚ö†Ô∏è URL ne contient pas client-photos');
    }

    return finalUrl;
  } catch (error) {
    console.error('‚ùå Erreur inattendue lors de l\'upload photo client:', error);
    return null;
  }
};
