
import { supabase } from "@/integrations/supabase/client";

export const ensureStorageBucket = async (bucketName: string = 'client-photos') => {
  try {
    console.log(`üîç V√©rification du bucket: ${bucketName}`);
    
    const { data: buckets, error } = await supabase.storage.listBuckets();
    
    if (error) {
      console.error(`‚ùå Erreur lors de la v√©rification des buckets:`, error);
      return false;
    }

    const bucket = buckets.find(bucket => bucket.name === bucketName);
    
    if (!bucket) {
      console.warn(`‚ö†Ô∏è Bucket ${bucketName} non trouv√©.`);
      return false;
    }

    console.log(`‚úÖ Bucket ${bucketName} trouv√© et accessible`);
    return true;
  } catch (error) {
    console.error(`‚ùå Erreur lors de la v√©rification du bucket ${bucketName}:`, error);
    return false;
  }
};

export const uploadClientPhoto = async (imageBase64: string, documentType: string = 'cin'): Promise<string | null> => {
  try {
    console.log("üì§ UPLOAD PHOTO CLIENT - D√©but de l'upload vers client-photos");
    
    // V√©rifier que le bucket client-photos existe
    const bucketExists = await ensureStorageBucket('client-photos');
    if (!bucketExists) {
      console.error('‚ùå Le bucket client-photos n\'existe pas ou n\'est pas accessible');
      return null;
    }

    // Convertir l'image base64 en blob
    const response = await fetch(imageBase64);
    const blob = await response.blob();
    const filename = `${documentType}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}.jpg`;
    
    console.log(`üìù Upload vers client-photos avec nom: ${filename}`);
    
    // Upload vers le bucket client-photos
    const { data, error } = await supabase.storage
      .from('client-photos')
      .upload(filename, blob, { 
        contentType: 'image/jpeg',
        upsert: false
      });

    if (error) {
      console.error('‚ùå Erreur lors de l\'upload vers client-photos:', error);
      return null;
    }

    console.log('‚úÖ Upload r√©ussi vers client-photos:', data);

    // G√©n√©rer l'URL publique pour client-photos
    const { data: publicURL } = supabase.storage
      .from('client-photos')
      .getPublicUrl(data.path);

    const finalUrl = publicURL.publicUrl;
    console.log('üåê URL publique g√©n√©r√©e pour client-photos:', finalUrl);
    
    // V√©rifier que l'URL contient bien client-photos
    if (!finalUrl.includes('client-photos')) {
      console.warn('‚ö†Ô∏è URL ne contient pas client-photos, probl√®me potentiel');
    }

    return finalUrl;
  } catch (error) {
    console.error('‚ùå Erreur inattendue lors de l\'upload photo client vers client-photos:', error);
    return null;
  }
};
