import { PDFTemplate } from './types';
import { supabase } from '@/integrations/supabase/client';
import { BucketManager } from './bucketManager';

export class TemplateOperations {
  static async loadTemplates(): Promise<PDFTemplate[]> {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        console.log('üö´ DEBUG: Utilisateur non connect√©, aucun template √† charger');
        return [];
      }

      console.log('üîç DEBUG: Chargement des templates pour l\'utilisateur:', user.id);

      // R√©cup√©rer le profil utilisateur pour debug
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('role')
        .eq('id', user.id)
        .single();

      if (profileError) {
        console.error('‚ùå Erreur r√©cup√©ration profil utilisateur:', profileError);
        throw new Error(`Impossible de r√©cup√©rer le profil utilisateur: ${profileError.message}`);
      }

      console.log('üîç DEBUG: R√¥le de l\'utilisateur actuel:', profile?.role);

      // V√©rifier l'acc√®s au bucket avant de continuer
      const bucketAccessible = await BucketManager.ensureBucket();
      if (!bucketAccessible) {
        console.error('‚ùå Le bucket pdf-templates n\'est pas accessible');
        throw new Error('Le bucket de stockage des templates n\'est pas disponible. V√©rifiez la configuration Supabase.');
      }

      console.log('‚úÖ Bucket accessible, synchronisation en cours...');

      // Synchroniser le bucket avec la base de donn√©es
      try {
        await BucketManager.syncBucketWithDatabase();
      } catch (syncError) {
        console.warn('‚ö†Ô∏è Erreur lors de la synchronisation, mais continuons avec les donn√©es en base:', syncError);
      }

      // Test direct de la fonction RLS
      console.log('üîç DEBUG: Test direct de la fonction get_current_user_role()...');
      const { data: roleTest, error: roleError } = await supabase.rpc('get_current_user_role');
      if (roleError) {
        console.error('‚ùå Erreur lors du test de la fonction get_current_user_role:', roleError);
      } else {
        console.log('üîç DEBUG: Fonction get_current_user_role() retourne:', roleTest);
      }

      // R√©cup√©rer les templates avec requ√™te simplifi√©e (sans join)
      console.log('üîç DEBUG: Requ√™te SELECT sur pdf_templates...');
      const { data: templates, error, count } = await supabase
        .from('pdf_templates')
        .select('*', { count: 'exact' })
        .order('upload_date', { ascending: false });

      if (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des templates:', error);
        console.error('‚ùå Code d\'erreur:', error.code);
        console.error('‚ùå Message d\'erreur:', error.message);
        console.error('‚ùå D√©tails:', error.details);
        throw new Error(`Impossible de charger les templates: ${error.message}`);
      }

      console.log('üîç DEBUG: Nombre total de templates dans la requ√™te:', count);
      console.log('üîç DEBUG: Templates r√©cup√©r√©s (bruts):', templates);

      if (!templates || templates.length === 0) {
        console.log('‚ö†Ô∏è Aucun template accessible pour cet utilisateur selon les politiques RLS');
        return [];
      }

      // Analyser chaque template en d√©tail
      templates.forEach((template, index) => {
        console.log(`üîç DEBUG: Template ${index + 1}:`, {
          id: template.id,
          name: template.name,
          user_id: template.user_id,
          current_user: user.id,
          is_owner: template.user_id === user.id
        });
      });

      const accessibleTemplates = templates.map(template => ({
        id: template.id,
        name: template.name,
        fileName: template.file_name,
        uploadDate: template.upload_date,
        filePath: template.file_path
      }));

      console.log(`‚úÖ ${accessibleTemplates.length} template(s) accessible(s) apr√®s traitement`);
      console.log('üîç DEBUG: Templates finaux retourn√©s:', accessibleTemplates);
      
      return accessibleTemplates;
    } catch (error) {
      console.error('‚ùå Erreur compl√®te lors du chargement des templates:', error);
      if (error instanceof Error) {
        throw error;
      } else {
        throw new Error('Erreur inconnue lors du chargement des templates');
      }
    }
  }

  static async saveTemplate(file: File, fileName: string): Promise<PDFTemplate> {
    // V√©rifier la disponibilit√© du bucket et les permissions
    const bucketExists = await BucketManager.ensureBucket();
    if (!bucketExists) {
      throw new Error('Le bucket de stockage n\'est pas disponible. V√©rifiez la configuration Supabase.');
    }

    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      throw new Error('Vous devez √™tre connect√© pour uploader des templates.');
    }

    // V√©rifier que l'utilisateur est admin
    const { data: profile } = await supabase
      .from('profiles')
      .select('role')
      .eq('id', user.id)
      .single();

    if (profile?.role !== 'admin') {
      throw new Error('Seuls les administrateurs peuvent uploader des templates.');
    }

    const templateId = Date.now().toString();
    const filePath = `${user.id}/${templateId}_${fileName}`;

    console.log('D√©but du processus d\'upload...');
    console.log('Chemin d\'upload:', filePath);
    console.log('Taille du fichier:', file.size, 'bytes');
    console.log('Type de fichier:', file.type);
    console.log('ID utilisateur:', user.id);

    // Upload du fichier vers Supabase Storage avec gestion d'erreur d√©taill√©e
    const { data, error: uploadError } = await supabase.storage
      .from(BucketManager.getBucketName())
      .upload(filePath, file, {
        contentType: 'application/pdf',
        upsert: false
      });

    if (uploadError) {
      console.error('D√©tails de l\'erreur d\'upload:', uploadError);
      console.error('Message d\'erreur:', uploadError.message);
      
      // Messages d'erreur plus explicites
      if (uploadError.message.toLowerCase().includes('duplicate') || uploadError.message.includes('already exists')) {
        throw new Error('Un fichier avec ce nom existe d√©j√†. Veuillez renommer le fichier et r√©essayer.');
      } else if (uploadError.message.toLowerCase().includes('permission') || uploadError.message.toLowerCase().includes('policy')) {
        throw new Error('Permission refus√©e. Seuls les administrateurs peuvent uploader des templates.');
      } else if (uploadError.message.toLowerCase().includes('size') || uploadError.message.toLowerCase().includes('limit')) {
        throw new Error('Le fichier est trop volumineux. Utilisez un fichier plus petit.');
      } else if (uploadError.message.toLowerCase().includes('unauthorized') || uploadError.message.toLowerCase().includes('authentication')) {
        throw new Error('Authentification √©chou√©e. Reconnectez-vous et r√©essayez.');
      } else if (uploadError.message.toLowerCase().includes('forbidden') || uploadError.message.toLowerCase().includes('access')) {
        throw new Error('Acc√®s interdit. V√©rifiez les permissions de votre compte.');
      } else {
        throw new Error(`√âchec de l'upload: ${uploadError.message}. Essayez √† nouveau ou contactez le support.`);
      }
    }

    console.log('‚úÖ Fichier upload√© avec succ√®s vers:', data?.path);

    // Sauvegarde des m√©tadonn√©es du template en base de donn√©es
    const { data: templateData, error: dbError } = await supabase
      .from('pdf_templates')
      .insert({
        id: templateId,
        user_id: user.id,
        name: fileName.replace('.pdf', ''),
        file_name: fileName,
        file_path: filePath,
        upload_date: new Date().toISOString()
      })
      .select()
      .single();

    if (dbError) {
      console.error('Erreur lors de l\'insertion en base de donn√©es:', dbError);
      // Nettoyer le fichier upload√© si l'insertion en base √©choue
      await supabase.storage.from(BucketManager.getBucketName()).remove([filePath]);
      throw new Error(`√âchec de la sauvegarde des informations du template: ${dbError.message}`);
    }

    console.log('‚úÖ Template sauvegard√© avec succ√®s:', templateData);

    return {
      id: templateData.id,
      name: templateData.name,
      fileName: templateData.file_name,
      uploadDate: templateData.upload_date,
      filePath: templateData.file_path
    };
  }

  static async getTemplateFile(template: PDFTemplate): Promise<File | null> {
    try {
      console.log('T√©l√©chargement du template:', template.filePath);
      
      const { data, error } = await supabase.storage
        .from(BucketManager.getBucketName())
        .download(template.filePath);

      if (error) {
        console.error('Erreur lors du t√©l√©chargement du template:', error);
        throw new Error(`Impossible de t√©l√©charger le template: ${error.message}`);
      }

      console.log('‚úÖ Template t√©l√©charg√© avec succ√®s');
      return new File([data], template.fileName, { type: 'application/pdf' });
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration du fichier template:', error);
      return null;
    }
  }

  static async deleteTemplate(templateId: string): Promise<void> {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      throw new Error('User not authenticated');
    }

    // V√©rifier que l'utilisateur est admin
    const { data: profile } = await supabase
      .from('profiles')
      .select('role')
      .eq('id', user.id)
      .single();

    if (profile?.role !== 'admin') {
      throw new Error('Seuls les administrateurs peuvent supprimer des templates.');
    }

    console.log('üóëÔ∏è DEBUG: D√©but suppression template:', templateId);

    // Get template to find file path
    const { data: template, error: getError } = await supabase
      .from('pdf_templates')
      .select('file_path')
      .eq('id', templateId)
      .single();

    if (getError || !template) {
      console.error('‚ùå Template non trouv√© pour suppression:', getError);
      throw new Error('Template not found');
    }

    console.log('üîç DEBUG: Template trouv√©, chemin fichier:', template.file_path);

    // Delete file from storage
    const { error: storageError } = await supabase.storage
      .from(BucketManager.getBucketName())
      .remove([template.file_path]);

    if (storageError) {
      console.error('‚ö†Ô∏è Erreur suppression fichier storage (continuons):', storageError);
    } else {
      console.log('‚úÖ Fichier supprim√© du storage');
    }

    // Delete template metadata
    const { error: deleteError } = await supabase
      .from('pdf_templates')
      .delete()
      .eq('id', templateId);

    if (deleteError) {
      console.error('‚ùå Erreur suppression m√©tadonn√©es:', deleteError);
      throw new Error(`Failed to delete template: ${deleteError.message}`);
    }

    console.log('‚úÖ M√©tadonn√©es template supprim√©es');

    // Delete associated mappings
    const { error: mappingError } = await supabase
      .from('pdf_template_mappings')
      .delete()
      .eq('template_id', templateId);

    if (mappingError) {
      console.error('‚ö†Ô∏è Erreur suppression mappings (non critique):', mappingError);
    } else {
      console.log('‚úÖ Mappings associ√©s supprim√©s');
    }

    console.log('üóëÔ∏è DEBUG: Suppression template termin√©e:', templateId);
  }

  static async renameTemplate(templateId: string, newName: string): Promise<void> {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      throw new Error('User not authenticated');
    }

    // V√©rifier que l'utilisateur est admin
    const { data: profile } = await supabase
      .from('profiles')
      .select('role')
      .eq('id', user.id)
      .single();

    if (profile?.role !== 'admin') {
      throw new Error('Seuls les administrateurs peuvent renommer des templates.');
    }

    const { error } = await supabase
      .from('pdf_templates')
      .update({ name: newName })
      .eq('id', templateId);

    if (error) {
      throw new Error(`Failed to rename template: ${error.message}`);
    }
  }
}
