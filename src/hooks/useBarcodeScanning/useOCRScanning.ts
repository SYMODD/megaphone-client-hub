
import { useState } from "react";
import { useImageUpload } from "@/hooks/useImageUpload";
import { compressImage } from "@/utils/imageCompression";
import { extractBarcode } from "@/services/ocr/barcodeExtractor";
import { extractPhoneNumber } from "@/services/ocr/phoneExtractor";
import { useOCRRequest } from "@/hooks/useOCRRequest";
import { toast } from "sonner";

interface UseOCRScanningProps {}

export const useOCRScanning = (props?: UseOCRScanningProps) => {
  const [isScanning, setIsScanning] = useState(false);
  const { uploadBarcodeImage } = useImageUpload();
  const { performOCR } = useOCRRequest();

  const scanForBarcodeAndPhone = async (
    file: File, 
    onResult: (barcode: string, phone?: string, barcodeImageUrl?: string) => void
  ) => {
    try {
      setIsScanning(true);
      console.log("üì± === D√âBUT SCAN CODE-BARRES AVEC HOOK CENTRALIS√â ===");

      // 1. Upload de l'image IMM√âDIATEMENT
      console.log("üì§ √âTAPE 1: Upload imm√©diat de l'image...");
      
      let barcodeImageUrl: string | null = null;
      let uploadAttempts = 0;
      const maxUploadAttempts = 3;

      while (!barcodeImageUrl && uploadAttempts < maxUploadAttempts) {
        uploadAttempts++;
        console.log(`üîÑ TENTATIVE UPLOAD ${uploadAttempts}/${maxUploadAttempts}`);

        barcodeImageUrl = await uploadBarcodeImage(file);
        
        if (barcodeImageUrl && typeof barcodeImageUrl === 'string' && barcodeImageUrl.trim() !== '') {
          console.log(`‚úÖ UPLOAD R√âUSSI √† la tentative ${uploadAttempts}:`, barcodeImageUrl);
          break;
        } else {
          console.warn(`‚ö†Ô∏è √âCHEC UPLOAD tentative ${uploadAttempts}`);
          
          if (uploadAttempts < maxUploadAttempts) {
            await new Promise(resolve => setTimeout(resolve, 1000));
          }
        }
      }
      
      if (!barcodeImageUrl || typeof barcodeImageUrl !== 'string' || barcodeImageUrl.trim() === '') {
        console.error("‚ùå √âCHEC CRITIQUE: Impossible d'uploader l'image");
        toast.error("‚ùå Impossible d'uploader l'image du code-barres");
        onResult("", "", "");
        return;
      }

      console.log("üéØ UPLOAD CONFIRM√â:", barcodeImageUrl.substring(0, 50) + "...");

      // 2. Compression pour OCR
      console.log("üîÑ √âTAPE 2: Compression pour OCR...");
      const compressedFileForOCR = await compressImage(file, {
        maxWidth: 1200,
        maxHeight: 1200,
        quality: 0.8,
        maxSizeKB: 800
      });

      // 3. Scan OCR avec hook centralis√© et cl√© PRO par d√©faut
      console.log("üîÑ √âTAPE 3: Scan OCR avec hook centralis√©...");
      const extractedText = await performOCR(compressedFileForOCR, 'helloworld');

      // 4. Extraction des donn√©es
      const phone = extractPhoneNumber(extractedText);
      const barcode = extractBarcode(extractedText, phone);

      console.log("üîç EXTRACTION TERMIN√âE:", {
        barcode: barcode || "Non d√©tect√©",
        phone: phone || "Non d√©tect√©"
      });

      // 5. TRANSMISSION FINALE
      console.log("‚úÖ APPEL onResult avec URL valid√©e:", barcodeImageUrl);
      onResult(barcode, phone, barcodeImageUrl);

      if (barcode || phone) {
        toast.success(`üéØ Scan r√©ussi: ${barcode ? 'Code-barres ‚úì' : ''} ${phone ? 'T√©l√©phone ‚úì' : ''} Image ‚úì`);
      }

    } catch (error) {
      console.error("‚ùå Erreur processus OCR:", error);
      toast.error("‚ùå Erreur lors du scan");
      onResult("", "", "");
    } finally {
      setIsScanning(false);
      console.log("üì± === FIN SCAN CODE-BARRES ===");
    }
  };

  return {
    scanForBarcodeAndPhone,
    isScanning
  };
};
