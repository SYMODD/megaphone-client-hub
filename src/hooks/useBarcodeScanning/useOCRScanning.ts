
import { useState } from "react";
import { toast } from "sonner";
import { useImageUpload } from "../useImageUpload";

interface UseOCRScanningProps {}

export const useOCRScanning = (props?: UseOCRScanningProps) => {
  const [isScanning, setIsScanning] = useState(false);
  const { uploadBarcodeImage } = useImageUpload();

  const scanForBarcodeAndPhone = async (
    file: File,
    onBarcodeScanned: (barcode: string, phone?: string, barcodeImageUrl?: string) => void
  ) => {
    console.log("üîç D√âBUT SCAN OCR pour code-barres - Upload vers barcode-images");
    setIsScanning(true);

    try {
      // 1. Upload de l'image vers barcode-images en PREMIER
      console.log("üì§ Upload de l'image de code-barres vers barcode-images...");
      const barcodeImageUrl = await uploadBarcodeImage(file);
      
      if (!barcodeImageUrl) {
        console.error("‚ùå √âchec de l'upload de l'image de code-barres");
        toast.error("Impossible d'uploader l'image de code-barres");
        setIsScanning(false);
        return;
      }

      console.log("‚úÖ Image de code-barres upload√©e avec succ√®s:", barcodeImageUrl);

      // 2. Simulation du scan OCR (en attente de l'impl√©mentation r√©elle de l'API OCR)
      console.log("üîç D√©marrage simulation du scan OCR...");
      
      // R√©duire le d√©lai et s'assurer que le processus se termine
      await new Promise(resolve => {
        setTimeout(() => {
          console.log("‚è∞ Timeout OCR termin√©");
          resolve(true);
        }, 1500); // R√©duit de 2000ms √† 1500ms
      });
      
      // Simulation d'extraction de donn√©es (√† remplacer par la vraie API OCR)
      const mockBarcode = `BC${Date.now().toString().slice(-6)}`;
      const mockPhone = file.name.includes('tel') ? '+212600000000' : undefined;
      
      console.log("üìä Donn√©es extraites (simulation):", {
        barcode: mockBarcode,
        phone: mockPhone,
        imageUrl: barcodeImageUrl,
        bucket: 'barcode-images'
      });

      // 3. S'assurer que l'√©tat scanning est mis √† false AVANT d'appeler le callback
      setIsScanning(false);
      
      console.log("üöÄ Transmission des donn√©es au callback avec URL:", {
        barcode: mockBarcode,
        phone: mockPhone,
        barcodeImageUrl: barcodeImageUrl,
        url_non_nulle: barcodeImageUrl ? "‚úÖ OUI" : "‚ùå NON"
      });

      // 4. Appeler le callback apr√®s avoir mis √† jour l'√©tat
      onBarcodeScanned(mockBarcode, mockPhone, barcodeImageUrl);
      
      console.log("‚úÖ Scan OCR termin√© avec succ√®s - URL transmise");
      toast.success("Code-barres extrait avec succ√®s !");
      
    } catch (error) {
      console.error("‚ùå Erreur lors du scan OCR:", error);
      toast.error("Erreur lors du scan de l'image");
      setIsScanning(false); // S'assurer que l'√©tat est r√©initialis√© en cas d'erreur
    }
  };

  return {
    scanForBarcodeAndPhone,
    isScanning
  };
};
