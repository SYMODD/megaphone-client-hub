
import { useState } from "react";
import { useImageUpload } from "@/hooks/useImageUpload";
import { compressImage } from "@/utils/imageCompression";
import { extractBarcode } from "@/services/ocr/barcodeExtractor";
import { extractPhoneNumber } from "@/services/ocr/phoneExtractor";
import { toast } from "sonner";

interface UseOCRScanningProps {}

export const useOCRScanning = (props?: UseOCRScanningProps) => {
  const [isScanning, setIsScanning] = useState(false);
  const { uploadBarcodeImage } = useImageUpload();

  const scanForBarcodeAndPhone = async (
    file: File, 
    onResult: (barcode: string, phone?: string, barcodeImageUrl?: string) => void
  ) => {
    try {
      setIsScanning(true);
      console.log("üî• OCR SCANNING - D√âBUT du processus complet");

      // 1. Upload de l'image IMM√âDIATEMENT avec validation renforc√©e
      console.log("üî• √âTAPE 1: Upload imm√©diat de l'image...", {
        fileName: file.name,
        fileSize: file.size,
        fileType: file.type,
        timestamp: new Date().toISOString()
      });
      
      // üéØ S√âCURIT√â RENFORC√âE : Double v√©rification de l'upload
      let barcodeImageUrl: string | null = null;
      let uploadAttempts = 0;
      const maxUploadAttempts = 3;

      while (!barcodeImageUrl && uploadAttempts < maxUploadAttempts) {
        uploadAttempts++;
        console.log(`üîÑ TENTATIVE UPLOAD ${uploadAttempts}/${maxUploadAttempts}`, {
          attempt: uploadAttempts,
          timestamp: new Date().toISOString()
        });

        barcodeImageUrl = await uploadBarcodeImage(file);
        
        if (barcodeImageUrl && typeof barcodeImageUrl === 'string' && barcodeImageUrl.trim() !== '') {
          console.log(`‚úÖ UPLOAD R√âUSSI √† la tentative ${uploadAttempts}:`, {
            url: barcodeImageUrl,
            length: barcodeImageUrl.length,
            type: typeof barcodeImageUrl,
            validation: "URL valide confirm√©e",
            timestamp: new Date().toISOString()
          });
          break;
        } else {
          console.warn(`‚ö†Ô∏è √âCHEC UPLOAD tentative ${uploadAttempts}:`, {
            url_retourn√©e: barcodeImageUrl,
            type: typeof barcodeImageUrl,
            will_retry: uploadAttempts < maxUploadAttempts,
            timestamp: new Date().toISOString()
          });
          
          if (uploadAttempts < maxUploadAttempts) {
            // Attendre 1 seconde avant de r√©essayer
            await new Promise(resolve => setTimeout(resolve, 1000));
          }
        }
      }
      
      // V√©rification finale absolue
      if (!barcodeImageUrl || typeof barcodeImageUrl !== 'string' || barcodeImageUrl.trim() === '') {
        console.error("‚ùå √âCHEC CRITIQUE: Impossible d'uploader l'image apr√®s toutes les tentatives", {
          tentatives_effectu√©es: uploadAttempts,
          url_finale: barcodeImageUrl,
          file_info: {
            name: file.name,
            size: file.size,
            type: file.type
          },
          timestamp: new Date().toISOString()
        });
        toast.error("‚ùå Impossible d'uploader l'image du code-barres apr√®s plusieurs tentatives");
        onResult("", "", "");
        return;
      }

      console.log("üéØ UPLOAD CONFIRM√â ET VALID√â:", {
        url_finale: barcodeImageUrl,
        longueur: barcodeImageUrl.length,
        type: typeof barcodeImageUrl,
        starts_with: barcodeImageUrl.substring(0, 50) + "...",
        validation_finale: "‚úÖ URL GARANTIE VALIDE",
        tentatives_utilis√©es: uploadAttempts,
        timestamp: new Date().toISOString()
      });

      // 2. Compression pour OCR (en parall√®le maintenant que l'upload est s√©curis√©)
      console.log("üî• √âTAPE 2: Compression pour OCR...");
      const compressedFileForOCR = await compressImage(file, {
        maxWidth: 1200,
        maxHeight: 1200,
        quality: 0.8,
        maxSizeKB: 800
      });

      // 3. Scan OCR
      console.log("üî• √âTAPE 3: Scan OCR...");
      const formData = new FormData();
      formData.append('file', compressedFileForOCR);
      formData.append('apikey', 'K87899883388957');
      formData.append('language', 'fre');
      formData.append('isOverlayRequired', 'false');
      formData.append('detectOrientation', 'false');
      formData.append('scale', 'true');
      formData.append('isTable', 'false');
      formData.append('OCREngine', '2');

      const response = await fetch('https://api.ocr.space/parse/image', {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        console.error("‚ùå Erreur API OCR:", response.status, response.statusText);
        throw new Error(`Erreur API OCR: ${response.status}`);
      }

      const data = await response.json();
      console.log("üìÑ R√©ponse OCR:", data);

      if (data.IsErroredOnProcessing) {
        console.error("‚ùå Erreur traitement OCR:", data.ErrorMessage);
        throw new Error(data.ErrorMessage || "Erreur lors du traitement OCR");
      }

      const extractedText = data.ParsedResults?.[0]?.ParsedText || "";
      
      // 4. Extraction des donn√©es
      const phone = extractPhoneNumber(extractedText);
      const barcode = extractBarcode(extractedText, phone);

      console.log("üî• EXTRACTION TERMIN√âE:", {
        barcode: barcode || "Non d√©tect√©",
        phone: phone || "Non d√©tect√©"
      });

      // 5. TRANSMISSION FINALE avec URL ABSOLUMENT GARANTIE
      console.log("üî• TRANSMISSION FINALE - Validation ultime avant envoi:", {
        barcode_extrait: barcode,
        phone_extrait: phone, 
        barcodeImageUrl_√†_envoyer: barcodeImageUrl,
        validations_finales: {
          url_existe: !!barcodeImageUrl,
          url_non_vide: barcodeImageUrl && barcodeImageUrl.trim() !== "",
          url_est_string: typeof barcodeImageUrl === 'string',
          longueur: barcodeImageUrl?.length || 0,
          type: typeof barcodeImageUrl,
          preview: barcodeImageUrl ? barcodeImageUrl.substring(0, 100) + "..." : "AUCUNE",
          upload_confirm√©: "‚úÖ UPLOAD GARANTI R√âUSSI"
        },
        timestamp: new Date().toISOString()
      });

      // üîí S√âCURIT√â ULTIME : Triple v√©rification avant transmission
      if (!barcodeImageUrl || typeof barcodeImageUrl !== 'string' || barcodeImageUrl.trim() === '') {
        console.error("‚ùå IMPOSSIBLE: URL invalide d√©tect√©e √† la transmission finale", {
          barcodeImageUrl,
          type: typeof barcodeImageUrl,
          evaluation: "Cette situation ne devrait JAMAIS se produire",
          timestamp: new Date().toISOString()
        });
        toast.error("‚ùå Erreur syst√®me: URL image invalide");
        onResult("", "", "");
        return;
      }

      console.log("üî• APPEL onResult - URL ABSOLUMENT VALID√âE:", {
        param1_barcode: barcode,
        param2_phone: phone,
        param3_barcodeImageUrl: barcodeImageUrl,
        function_call: "onResult() avec URL 100% garantie",
        url_length: barcodeImageUrl.length,
        url_type: typeof barcodeImageUrl,
        url_preview: barcodeImageUrl.substring(0, 100) + "...",
        timestamp: new Date().toISOString()
      });

      // APPEL DE LA FONCTION CALLBACK AVEC URL ABSOLUMENT GARANTIE
      onResult(barcode, phone, barcodeImageUrl);

      console.log("‚úÖ CALLBACK EX√âCUT√âE - URL TRANSMISE AVEC GARANTIE ABSOLUE", {
        url_transmise: barcodeImageUrl,
        verification_finale: "URL valid√©e avec triple s√©curit√©",
        success: "TRANSMISSION 100% S√âCURIS√âE",
        timestamp: new Date().toISOString()
      });

      if (barcode || phone) {
        toast.success(`üéØ Scan r√©ussi: ${barcode ? 'Code-barres ‚úì' : ''} ${phone ? 'T√©l√©phone ‚úì' : ''} Image ‚úì`);
      }

    } catch (error) {
      console.error("‚ùå Erreur processus OCR:", error, {
        timestamp: new Date().toISOString(),
        context: "useOCRScanning.scanForBarcodeAndPhone"
      });
      toast.error("‚ùå Erreur lors du scan");
      onResult("", "", "");
    } finally {
      setIsScanning(false);
    }
  };

  return {
    scanForBarcodeAndPhone,
    isScanning
  };
};
