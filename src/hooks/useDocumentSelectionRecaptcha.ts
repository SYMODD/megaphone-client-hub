
import { useRecaptchaV3 } from "@/hooks/useRecaptchaV3";
import { validateRecaptchaToken, RECAPTCHA_ACTIONS } from "@/services/recaptchaValidation";
import { toast } from "sonner";

export const useDocumentSelectionRecaptcha = () => {
  const { executeRecaptcha, isConfigured } = useRecaptchaV3();

  const validateDocumentSelection = async (): Promise<boolean> => {
    // Si reCAPTCHA n'est pas configur√©, permettre l'acc√®s
    if (!isConfigured) {
      console.log("‚ö†Ô∏è reCAPTCHA non configur√© pour la s√©lection de document");
      return true;
    }

    try {
      console.log("ü§ñ Validation reCAPTCHA pour s√©lection de document");

      // Ex√©cuter reCAPTCHA
      const token = await executeRecaptcha(RECAPTCHA_ACTIONS.DOCUMENT_SELECTION);
      
      if (!token) {
        console.error("‚ùå Impossible de g√©n√©rer le token reCAPTCHA");
        toast.error("Erreur de validation de s√©curit√©");
        return false;
      }

      // Valider le token c√¥t√© serveur
      const validationResult = await validateRecaptchaToken(
        token, 
        RECAPTCHA_ACTIONS.DOCUMENT_SELECTION
      );
      
      if (!validationResult.success) {
        console.error("‚ùå Validation reCAPTCHA √©chou√©e:", validationResult.error);
        toast.error("Validation de s√©curit√© √©chou√©e");
        return false;
      }

      console.log(`‚úÖ S√©lection de document valid√©e - Score: ${validationResult.score}`);
      return true;

    } catch (error) {
      console.error("‚ùå Erreur lors de la validation reCAPTCHA:", error);
      toast.error("Erreur de validation de s√©curit√©");
      return false;
    }
  };

  return {
    validateDocumentSelection,
    isRecaptchaConfigured: isConfigured
  };
};
