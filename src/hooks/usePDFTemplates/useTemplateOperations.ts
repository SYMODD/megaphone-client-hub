
import { useState } from 'react';
import { useToast } from '@/hooks/use-toast';
import { TemplateOperations } from '@/services/pdf/templateOperations';
import { PDFTemplate } from './types';

export const useTemplateOperations = () => {
  const [templates, setTemplates] = useState<PDFTemplate[]>([]);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();

  const saveTemplate = async (file: File, fileName: string): Promise<string> => {
    try {
      setError(null);
      console.log('üîÑ Sauvegarde du template:', fileName);
      
      const newTemplate = await TemplateOperations.saveTemplate(file, fileName);

      console.log('‚úÖ Template sauvegard√© avec succ√®s:', newTemplate.id);
      
      // CORRECTION: Ajouter imm√©diatement le nouveau template √† l'√©tat local
      setTemplates(prevTemplates => {
        const updatedTemplates = [...prevTemplates, newTemplate];
        console.log('‚úÖ Template ajout√© √† l\'√©tat local. Total:', updatedTemplates.length);
        return updatedTemplates;
      });

      toast({
        title: "Template sauvegard√©",
        description: `Le template "${fileName}" a √©t√© sauvegard√© avec succ√®s.`,
      });

      return newTemplate.id;
    } catch (error) {
      console.error('‚ùå Erreur sauvegarde template:', error);
      const errorMessage = error instanceof Error ? error.message : "Impossible de sauvegarder le template.";
      setError(errorMessage);
      
      toast({
        title: "Erreur de sauvegarde",
        description: errorMessage,
        variant: "destructive",
      });
      throw error;
    }
  };

  const renameTemplate = async (templateId: string, newName: string) => {
    try {
      setError(null);
      console.log('üîÑ Renommage du template:', templateId, 'vers:', newName);
      
      await TemplateOperations.renameTemplate(templateId, newName);

      // Mettre √† jour imm√©diatement l'√©tat local
      setTemplates(prevTemplates => 
        prevTemplates.map(template => 
          template.id === templateId 
            ? { ...template, name: newName }
            : template
        )
      );

      toast({
        title: "Template renomm√©",
        description: `Le template a √©t√© renomm√© en "${newName}".`,
      });
      
      console.log('‚úÖ Template renomm√© avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur renommage template:', error);
      const errorMessage = error instanceof Error ? error.message : "Impossible de renommer le template.";
      setError(errorMessage);
      
      toast({
        title: "Erreur de renommage",
        description: errorMessage,
        variant: "destructive",
      });
      throw error;
    }
  };

  const deleteTemplate = async (templateId: string) => {
    try {
      setError(null);
      console.log('üîÑ Suppression du template:', templateId);
      
      // PURGE EN DUR : Supprimer imm√©diatement de l'√©tat local AVANT l'appel backend
      console.log('üóëÔ∏è PURGE EN DUR: Suppression imm√©diate de l\'√©tat local');
      setTemplates(prevTemplates => {
        const filteredTemplates = prevTemplates.filter(template => template.id !== templateId);
        console.log('üóëÔ∏è √âtat local purg√©. Templates restants:', filteredTemplates.length);
        return filteredTemplates;
      });
      
      // Ensuite appeler le backend
      await TemplateOperations.deleteTemplate(templateId);

      toast({
        title: "Template supprim√©",
        description: "Le template a √©t√© supprim√© avec succ√®s.",
      });
      
      console.log('‚úÖ Suppression backend termin√©e. √âtat local d√©j√† purg√©.');
    } catch (error) {
      console.error('‚ùå Erreur suppression template:', error);
      
      // En cas d'erreur backend, recharger les templates depuis le serveur pour resynchroniser
      console.log('‚ö†Ô∏è Erreur backend d√©tect√©e, rechargement depuis serveur...');
      try {
        const freshTemplates = await TemplateOperations.loadTemplates();
        setTemplates(freshTemplates);
        console.log('üîÑ √âtat resynchronis√© avec le serveur apr√®s erreur');
      } catch (loadError) {
        console.error('‚ùå Impossible de resynchroniser:', loadError);
      }
      
      const errorMessage = error instanceof Error ? error.message : "Impossible de supprimer le template.";
      setError(errorMessage);
      
      toast({
        title: "Erreur de suppression",
        description: errorMessage,
        variant: "destructive",
      });
      throw error;
    }
  };

  const getTemplate = async (templateId: string): Promise<File | null> => {
    const template = templates.find(t => t.id === templateId);
    if (!template) return null;

    try {
      return await TemplateOperations.getTemplateFile(template);
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration template:', error);
      const errorMessage = error instanceof Error ? error.message : "Impossible de r√©cup√©rer le template.";
      setError(errorMessage);
      
      toast({
        title: "Erreur de r√©cup√©ration",
        description: errorMessage,
        variant: "destructive",
      });
      return null;
    }
  };

  // NOUVELLE FONCTION : Purge compl√®te et rechargement depuis le serveur
  const hardPurgeAndReload = async (): Promise<void> => {
    try {
      console.log('üî• PURGE EN DUR D√âCLENCH√âE');
      setError(null);
      
      // Vider compl√®tement l'√©tat local
      setTemplates([]);
      console.log('üóëÔ∏è √âtat local vid√© compl√®tement');
      
      // Recharger depuis le serveur
      const freshTemplates = await TemplateOperations.loadTemplates();
      setTemplates(freshTemplates);
      
      console.log('‚úÖ PURGE TERMIN√âE. Templates recharg√©s depuis serveur:', freshTemplates.length);
      
      toast({
        title: "√âtat synchronis√©",
        description: "Les templates ont √©t√© recharg√©s depuis le serveur.",
      });
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la purge compl√®te:', error);
      const errorMessage = error instanceof Error ? error.message : "Erreur lors de la synchronisation.";
      setError(errorMessage);
      
      toast({
        title: "Erreur de synchronisation",
        description: errorMessage,
        variant: "destructive",
      });
    }
  };

  return {
    templates,
    setTemplates,
    error,
    setError,
    saveTemplate,
    renameTemplate,
    deleteTemplate,
    getTemplate,
    hardPurgeAndReload
  };
};
