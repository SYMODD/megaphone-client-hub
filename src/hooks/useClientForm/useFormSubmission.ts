
import { useState } from "react";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";
import { ClientFormData } from "./types";

interface UseFormSubmissionProps {
  formData: ClientFormData;
  resetForm: () => void;
}

export const useFormSubmission = ({ formData, resetForm }: UseFormSubmissionProps) => {
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    console.log("üî• FORM SUBMISSION - D√âBUT SOUMISSION - √âtat complet du formulaire:", {
      formData_complet: formData,
      focus_url: {
        code_barre_image_url: formData.code_barre_image_url,
        type: typeof formData.code_barre_image_url,
        longueur: formData.code_barre_image_url?.length || 0,
        truthy: !!formData.code_barre_image_url,
        non_vide: formData.code_barre_image_url && formData.code_barre_image_url.trim() !== "",
        preview: formData.code_barre_image_url ? formData.code_barre_image_url.substring(0, 100) + "..." : "AUCUNE URL"
      },
      autres_donn√©es: {
        code_barre: formData.code_barre,
        nom: formData.nom,
        prenom: formData.prenom,
        numero_telephone: formData.numero_telephone
      },
      timestamp: new Date().toISOString()
    });

    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        console.error("‚ùå ERREUR AUTH:", {
          message: "Utilisateur non authentifi√©",
          timestamp: new Date().toISOString()
        });
        toast.error("Erreur: Utilisateur non authentifi√©");
        return;
      }

      console.log("‚úÖ UTILISATEUR AUTHENTIFI√â:", {
        user_id: user.id,
        email: user.email,
        timestamp: new Date().toISOString()
      });

      // üéØ TRANSMISSION DIRECTE - Pas de validation qui peut bloquer
      const dataToInsert = {
        nom: formData.nom,
        prenom: formData.prenom,
        nationalite: formData.nationalite,
        numero_passeport: formData.numero_passeport,
        numero_telephone: formData.numero_telephone,
        code_barre: formData.code_barre,
        code_barre_image_url: formData.code_barre_image_url, // üîë TRANSMISSION DIRECTE
        observations: formData.observations,
        date_enregistrement: formData.date_enregistrement,
        photo_url: formData.photo_url,
        document_type: formData.document_type,
        agent_id: user.id
      };

      console.log("üî• PR√âPARATION INSERTION - Donn√©es exactes pr√©par√©es:", {
        dataToInsert_complet: dataToInsert,
        focus_url_insertion: {
          code_barre_image_url: dataToInsert.code_barre_image_url,
          source_formData: formData.code_barre_image_url,
          correspondance: formData.code_barre_image_url === dataToInsert.code_barre_image_url ? "‚úÖ IDENTIQUE" : "‚ùå DIFF√âRENT",
          type: typeof dataToInsert.code_barre_image_url,
          longueur: dataToInsert.code_barre_image_url?.length || 0,
          verification_transmission: "‚úÖ Transmission directe sans modification"
        },
        timestamp: new Date().toISOString()
      });

      console.log("üî• APPEL SUPABASE INSERT - Requ√™te finale:", {
        table: "clients",
        donn√©es_envoy√©es: dataToInsert,
        url_envoy√©e: dataToInsert.code_barre_image_url,
        statut_url: dataToInsert.code_barre_image_url ? "‚úÖ URL PR√âSENTE POUR INSERTION" : "‚ö†Ô∏è URL VIDE MAIS TRANSMISE",
        transmission_directe: "‚úÖ Pas de nettoyage qui peut supprimer l'URL",
        timestamp: new Date().toISOString()
      });

      const { data, error } = await supabase
        .from('clients')
        .insert([dataToInsert])
        .select();

      if (error) {
        console.error("‚ùå ERREUR INSERTION SUPABASE:", {
          error_details: error,
          error_message: error.message,
          error_code: error.code,
          donn√©es_tent√©es: dataToInsert,
          url_dans_donn√©es: dataToInsert.code_barre_image_url,
          timestamp: new Date().toISOString()
        });
        toast.error(`Erreur: ${error.message}`);
        return;
      }

      console.log("üî• INSERTION R√âUSSIE - Analyse du r√©sultat:", {
        data_retourn√©e: data,
        nombre_enregistrements: data?.length || 0,
        timestamp: new Date().toISOString()
      });

      if (data && data[0]) {
        const savedClient = data[0];
        
        console.log("üî• V√âRIFICATION POST-INSERTION - Analyse compl√®te:", {
          client_id: savedClient.id,
          donn√©es_sauv√©es: savedClient,
          focus_url_sauv√©e: {
            code_barre_image_url_en_base: savedClient.code_barre_image_url,
            url_envoy√©e_originale: dataToInsert.code_barre_image_url,
            url_du_formulaire: formData.code_barre_image_url,
            correspondance_envoi_base: savedClient.code_barre_image_url === dataToInsert.code_barre_image_url ? "‚úÖ CORRESPONDANCE PARFAITE" : "‚ùå DIVERGENCE D√âTECT√âE",
            correspondance_form_base: savedClient.code_barre_image_url === formData.code_barre_image_url ? "‚úÖ FORM = BASE" : "‚ùå FORM ‚â† BASE",
            statut_final: savedClient.code_barre_image_url ? "‚úÖ URL SAUV√âE EN BASE" : "‚ùå URL VIDE EN BASE"
          },
          autres_champs_sauv√©s: {
            code_barre: savedClient.code_barre,
            nom: savedClient.nom,
            prenom: savedClient.prenom,
            numero_telephone: savedClient.numero_telephone
          },
          timestamp: new Date().toISOString()
        });

        if (savedClient.code_barre_image_url) {
          console.log("‚úÖ SUCC√àS COMPLET:", {
            message: "Client et image sauvegard√©s avec succ√®s",
            url_confirm√©e: savedClient.code_barre_image_url,
            timestamp: new Date().toISOString()
          });
          toast.success("‚úÖ Client et image sauvegard√©s avec succ√®s !");
        } else {
          console.log("‚ö†Ô∏è SUCC√àS PARTIEL:", {
            message: "Client enregistr√© mais URL image vide",
            donn√©es_client: savedClient,
            investigation_requise: "V√©rifier pourquoi l'URL n'a pas √©t√© sauv√©e",
            timestamp: new Date().toISOString()
          });
          toast.success("‚úÖ Client enregistr√© !");
        }
      }

      console.log("üî• RESET FORMULAIRE - Nettoyage des donn√©es:", {
        action: "resetForm() appel√©e",
        timestamp: new Date().toISOString()
      });

      resetForm();

    } catch (error) {
      console.error("‚ùå ERREUR G√âN√âRALE SUBMISSION:", {
        error_d√©tails: error,
        error_message: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : "Pas de stack",
        context: "useFormSubmission.handleSubmit",
        timestamp: new Date().toISOString()
      });
      toast.error("Erreur lors de l'enregistrement");
    } finally {
      setIsSubmitting(false);
      console.log("üî• SUBMISSION TERMIN√âE:", {
        isSubmitting: false,
        timestamp: new Date().toISOString()
      });
    }
  };

  return {
    isSubmitting,
    handleSubmit
  };
};
